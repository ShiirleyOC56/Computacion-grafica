# -*- coding: utf-8 -*-
"""Grafica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XmLo9xKdCnWVXj0o3VYPuMMI1ekNDP_f

# Ejercicio 1

**Parte 1:** primera posicion de la camara
*   e = (0, 5, 2).
*   g = (0, −2, −5).
*   t = (0, 1, 0).
"""

import numpy as np
import math as mt
nx=100 #ancho
ny=80 #alto
#MATRIZ DE COORDENADAS O PUNTOS
P=np.array([
            [-1,1,1,-1],
            [2,2,0,0],
            [-6,-6,-6,-6],
            [1,1,1,1]
            ])
#MATRIZ DE VIEWPORT
Mvp=np.array([
              [nx/2, 0,0,(nx-1)/2],
              [0,ny/2,0,(ny-1)/2],
              [0,0,1,0],
              [0,0,0,1]
              ])
#MATRIZ ORTOGRAFICA
#parametros
l=-2
r=2
b=0
t=3
n=-4
f=-8

Morth=np.array([
                [2/(r-l),0,0,-((r+l)/(r-l))],
                [0,2/(t-b),0,-((t+b)/(t-b))],
                [0,0,2/(n-f),-((n+f)/(n-f))],
                [0,0,0,1]
                ])
#MATRIZ DE CAMARA
e= np.array([0,5,2])
g= np.array([0,-2,-5])
t= np.array([0,1,0])
w= np.true_divide(-g,np.linalg.norm(g))
u= np.true_divide(np.cross(t,w),np.linalg.norm(np.cross(t,w)))
v = np.cross(w,u)

cam=np.array([
               [u[0],u[1],u[2],0],
               [v[0],v[1],v[2],0],
               [w[0],w[1],w[2],0],
               [0,0,0,1]
               ])

invcam=np.array([
               [1,0,0,-e[0]],
               [0,1,0,-e[1]],
               [0,0,1,-e[2]],
               [0,0,0,1]
])
Mcam = np.matmul(cam,invcam)

#MULTIPLICACION DE Mvp, Morth y Mcam
vp_orth=np.matmul(Mvp,Morth)
M = np.matmul(vp_orth,Mcam)
#Resutado
print("******Mvp******")
print(Mvp)
print("******Morth******")
print(Morth)
print("******Mcam******")
print(Mcam)
print("******Multiplicacion de las matrices M = Mvp * Morth * Mcam")
print(M)
coor2D=np.matmul(M,P)
print("******Resultado")
print(coor2D)

"""**Parte 2:** segunda posicion de la camara
*   e = (0, 2, 2).
*   g = (0, −2, −5).
*   t = (0, 1, 0).
"""

import numpy as np
import math as mt
nx=100 #ancho
ny=80 #alto
#MATRIZ DE COORDENADAS O PUNTOS
P=np.array([
            [-1,1,1,-1],
            [2,2,0,0],
            [-6,-6,-6,-6],
            [1,1,1,1]
            ])
#MATRIZ DE VIEWPORT
Mvp=np.array([
              [nx/2, 0,0,(nx-1)/2],
              [0,ny/2,0,(ny-1)/2],
              [0,0,1,0],
              [0,0,0,1]
              ])
#MATRIZ ORTOGRAFICA
#parametros
l=-2
r=2
b=0
t=3
n=-4
f=-8

Morth=np.array([
                [2/(r-l),0,0,-((r+l)/(r-l))],
                [0,2/(t-b),0,-((t+b)/(t-b))],
                [0,0,2/(n-f),-((n+f)/(n-f))],
                [0,0,0,1]
                ])
#MATRIZ DE CAMARA
e= np.array([0,2,2])
g= np.array([0,-2,-5])
t= np.array([0,1,0])
w= np.true_divide(-g,np.linalg.norm(g))
u= np.true_divide(np.cross(t,w),np.linalg.norm(np.cross(t,w)))
v = np.cross(w,u)

cam=np.array([
               [u[0],u[1],u[2],0],
               [v[0],v[1],v[2],0],
               [w[0],w[1],w[2],0],
               [0,0,0,1]
               ])

invcam=np.array([
               [1,0,0,-e[0]],
               [0,1,0,-e[1]],
               [0,0,1,-e[2]],
               [0,0,0,1]
])
Mcam = np.matmul(cam,invcam)
#MULTIPLICACION DE Mvp, Morth y Mcam
vp_orth=np.matmul(Mvp,Morth)
M = np.matmul(vp_orth,Mcam)
#Resutado
print("******Mvp******")
print(Mvp)
print("******Morth******")
print(Morth)
print("******Mcam******")
print(Mcam)
print("******Multiplicacion de las matrices M = Mvp * Morth * Mcam")
print(M)
coor2D=np.matmul(M,P)
print("******Coordenadas en 2D")
print(coor2D)

"""# Ejercicio 2
**Parte 1:** primera posicion de la camara
*   e = (0, 5, 2).
*   g = (0, −2, −5).
*   t = (0, 1, 0).
"""

import numpy as np
import math as mt
nx=100 #ancho
ny=80 #alto
#MATRIZ DE COORDENADAS O PUNTOS
Puntos=np.array([
            [-1,1,1,-1],
            [2,2,0,0],
            [-6,-6,-6,-6],
            [1,1,1,1]
            ])
#MATRIZ DE VIEWPORT
Mvp=np.array([
              [nx/2, 0,0,(nx-1)/2],
              [0,ny/2,0,(ny-1)/2],
              [0,0,1,0],
              [0,0,0,1]
              ])
#MATRIZ ORTOGRAFICA
#parametros
l=-2
r=2
b=0
t=3
n=-4
f=-8

Morth=np.array([
                [2/(r-l),0,0,-((r+l)/(r-l))],
                [0,2/(t-b),0,-((t+b)/(t-b))],
                [0,0,2/(n-f),-((n+f)/(n-f))],
                [0,0,0,1]
                ])
#MATRIZ PERSPECTIVA
#parametros n=-4 y f=-8
P = np.array([
            [n,0,0,0],
            [0,n,0,0],
            [0,0,(n+f),-(f*n)],
            [0,0,1,0]
])
Mper = np.matmul(Morth,P)
#MATRIZ DE CAMARA
e= np.array([0,5,2])
g= np.array([0,-2,-5])
t= np.array([0,1,0])
w= np.true_divide(-g,np.linalg.norm(g))
u= np.true_divide(np.cross(t,w),np.linalg.norm(np.cross(t,w)))
v = np.cross(w,u)

cam=np.array([
               [u[0],u[1],u[2],0],
               [v[0],v[1],v[2],0],
               [w[0],w[1],w[2],0],
               [0,0,0,1]
               ])

invcam=np.array([
               [1,0,0,-e[0]],
               [0,1,0,-e[1]],
               [0,0,1,-e[2]],
               [0,0,0,1]
])
Mcam = np.matmul(cam,invcam)

#MULTIPLICACION DE Mvp, Morth y Mcam
vp_per=np.matmul(Mvp,Mper)
M = np.matmul(vp_per,Mcam)
#Resutado
print("******Mvp******")
print(Mvp)
print("******Mper******")
print(Mper)
print("******Mcam******")
print(Mcam)
print("******Multiplicacion de las matrices M = Mvp * Morth * Mcam")
print(M)
coor2D=np.matmul(M,Puntos)
print("******Coordenadas en 2D")

Cm=np.array([
             [(coor2D[0][0]/coor2D[3][0]),(coor2D[0][1]/coor2D[3][1]),(coor2D[0][2]/coor2D[3][2]),(coor2D[0][3]/coor2D[3][3])],
             [(coor2D[1][0]/coor2D[3][0]),(coor2D[1][1]/coor2D[3][1]),(coor2D[1][2]/coor2D[3][2]),(coor2D[1][3]/coor2D[3][3])],
             [(coor2D[2][0]/coor2D[3][0]),(coor2D[2][1]/coor2D[3][1]),(coor2D[2][2]/coor2D[3][2]),(coor2D[2][3]/coor2D[3][3])],
             [(coor2D[3][0]/coor2D[3][0]),(coor2D[3][1]/coor2D[3][1]),(coor2D[3][2]/coor2D[3][2]),(coor2D[3][3]/coor2D[3][3])]
             ])
print(Cm)

"""**Parte 2:** segunda posicion de la camara
*   e = (0, 2, 2).
*   g = (0, −2, −5).
*   t = (0, 1, 0).
"""

import numpy as np
import math as mt
nx=100 #ancho
ny=80 #alto
#MATRIZ DE COORDENADAS O PUNTOS
Puntos=np.array([
            [-1,1,1,-1],
            [2,2,0,0],
            [-6,-6,-6,-6],
            [1,1,1,1]
            ])
#MATRIZ DE VIEWPORT
Mvp=np.array([
              [nx/2, 0,0,(nx-1)/2],
              [0,ny/2,0,(ny-1)/2],
              [0,0,1,0],
              [0,0,0,1]
              ])
#MATRIZ ORTOGRAFICA
#parametros
l=-2
r=2
b=0
t=3
n=-4
f=-8

Morth=np.array([
                [2/(r-l),0,0,-((r+l)/(r-l))],
                [0,2/(t-b),0,-((t+b)/(t-b))],
                [0,0,2/(n-f),-((n+f)/(n-f))],
                [0,0,0,1]
                ])
#MATRIZ PERSPECTIVA
#parametros n=-4 y f=-8
P = np.array([
            [n,0,0,0],
            [0,n,0,0],
            [0,0,(n+f),-(f*n)],
            [0,0,1,0]
])
Mper = np.matmul(Morth,P)
Mper2 = np.array([
            [(2*n/r-l),0,(l+r)/(l-r),0],
            [0,(2*n/t-b),(b+t)/(b-t),0],
            [0,0,(f+n)/(n-f),2*f*n/(f-n)],
            [0,0,1,0]
])
#MATRIZ DE CAMARA
e= np.array([0,2,2])
g= np.array([0,-2,-5])
t= np.array([0,1,0])
w= np.true_divide(-g,np.linalg.norm(g))
u= np.true_divide(np.cross(t,w),np.linalg.norm(np.cross(t,w)))
v = np.cross(w,u)

cam=np.array([
               [u[0],u[1],u[2],0],
               [v[0],v[1],v[2],0],
               [w[0],w[1],w[2],0],
               [0,0,0,1]
               ])

invcam=np.array([
               [1,0,0,-e[0]],
               [0,1,0,-e[1]],
               [0,0,1,-e[2]],
               [0,0,0,1]
])
Mcam = np.matmul(cam,invcam)
#MULTIPLICACION DE Mvp, Morth y Mcam
vp_per=np.matmul(Mvp,Mper)
M = np.matmul(vp_per,Mcam)
#Resutado
print("******Mvp******")
print(Mvp)
print("******Mper******")
print(Mper)
print("******Mcam******")
print(Mcam)
print("******Multiplicacion de las matrices M = Mvp * Morth * Mcam")
print(M)
coor2D=np.matmul(M,Puntos)
print("******Coordenadas en 2D")

Cm=np.array([
             [(coor2D[0][0]/coor2D[3][0]),(coor2D[0][1]/coor2D[3][1]),(coor2D[0][2]/coor2D[3][2]),(coor2D[0][3]/coor2D[3][3])],
             [(coor2D[1][0]/coor2D[3][0]),(coor2D[1][1]/coor2D[3][1]),(coor2D[1][2]/coor2D[3][2]),(coor2D[1][3]/coor2D[3][3])],
             [(coor2D[2][0]/coor2D[3][0]),(coor2D[2][1]/coor2D[3][1]),(coor2D[2][2]/coor2D[3][2]),(coor2D[2][3]/coor2D[3][3])],
             [(coor2D[3][0]/coor2D[3][0]),(coor2D[3][1]/coor2D[3][1]),(coor2D[3][2]/coor2D[3][2]),(coor2D[3][3]/coor2D[3][3])]
             ])
print(Cm)

"""# Ejercicio 3
Ángulo $\theta $ = 60
*   e = (0, 4, 2).
*   g = (0, −2, −5).
*   t = (0, 1, 0).


"""

import numpy as np
import math as mt
nx=100 #ancho
ny=80 #alto
#MATRIZ DE COORDENADAS O PUNTOS
Puntos=np.array([
            [-1,1,1,-1],
            [2,2,0,0],
            [-6,-6,-6,-6],
            [1,1,1,1]
            ])
#MATRIZ DE VIEWPORT
Mvp=np.array([
              [nx/2, 0,0,(nx-1)/2],
              [0,ny/2,0,(ny-1)/2],
              [0,0,1,0],
              [0,0,0,1]
              ])
#MATRIZ ORTOGRAFICA
#parametros
theta=mt.pi/3 #60 
n=-4
f=-8
t=np.tan(theta/2)*np.absolute(n) #2.30
r=(nx/ny)*t
l=-r
b=-t
print("Parametros r, l, b y t")
print("r = ",r)
print("l = ",l)
print("b = ",b)
print("t = ",t)
Morth=np.array([
                [2/(r-l),0,0,-((r+l)/(r-l))],
                [0,2/(t-b),0,-((t+b)/(t-b))],
                [0,0,2/(n-f),-((n+f)/(n-f))],
                [0,0,0,1]
                ])
#MATRIZ PERSPECTIVA
#parametros n=-4 y f=-8
P = np.array([
            [n,0,0,0],
            [0,n,0,0],
            [0,0,(n+f),-(f*n)],
            [0,0,1,0]
])
Mper = np.matmul(Morth,P)
Mper2 = np.array([
            [(2*n/r-l),0,(l+r)/(l-r),0],
            [0,(2*n/t-b),(b+t)/(b-t),0],
            [0,0,(f+n)/(n-f),2*f*n/(f-n)],
            [0,0,1,0]
])
#MATRIZ DE CAMARA
e= np.array([0,4,2])
g= np.array([0,-2,-5])
t= np.array([0,1,0])
w= np.true_divide(-g,np.linalg.norm(g))
u= np.true_divide(np.cross(t,w),np.linalg.norm(np.cross(t,w)))
v = np.cross(w,u)

cam=np.array([
               [u[0],u[1],u[2],0],
               [v[0],v[1],v[2],0],
               [w[0],w[1],w[2],0],
               [0,0,0,1]
               ])

invcam=np.array([
               [1,0,0,-e[0]],
               [0,1,0,-e[1]],
               [0,0,1,-e[2]],
               [0,0,0,1]
])
Mcam = np.matmul(cam,invcam)
#MULTIPLICACION DE Mvp, Morth y Mcam
vp_per=np.matmul(Mvp,Mper)
M = np.matmul(vp_per,Mcam)
#Resutado
print("******Mvp******")
print(Mvp)
print("******Mper******")
print(Mper)
print("******Mcam******")
print(Mcam)
print("******Multiplicacion de las matrices M = Mvp * Morth * Mcam")
print(M)
coor2D=np.matmul(M,Puntos)
print("******Coordenadas en 2D")

Cm=np.array([
             [(coor2D[0][0]/coor2D[3][0]),(coor2D[0][1]/coor2D[3][1]),(coor2D[0][2]/coor2D[3][2]),(coor2D[0][3]/coor2D[3][3])],
             [(coor2D[1][0]/coor2D[3][0]),(coor2D[1][1]/coor2D[3][1]),(coor2D[1][2]/coor2D[3][2]),(coor2D[1][3]/coor2D[3][3])],
             [(coor2D[2][0]/coor2D[3][0]),(coor2D[2][1]/coor2D[3][1]),(coor2D[2][2]/coor2D[3][2]),(coor2D[2][3]/coor2D[3][3])],
             [(coor2D[3][0]/coor2D[3][0]),(coor2D[3][1]/coor2D[3][1]),(coor2D[3][2]/coor2D[3][2]),(coor2D[3][3]/coor2D[3][3])]
             ])
print(Cm)


